<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="d0/d0b/a00004">
    <title>signal.cpp File Reference</title>
<para>Include dependency diagram for signal.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../d2/de1/a00421.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for signal.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../db/d43/a00422.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="d0/d0b/a00004_1a840291bc02cba5474a4cb46a9b9566fe">main</link> (
void )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d0/d0b/a00004_1a3b369c364dd84f7b8e12882541c3f808">taskOne</link> (
std::shared_ptr&lt;<link linkend="d8/d84/a00001">Semaphore</link>&gt; theSemaphore)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d0/d0b/a00004_1ac144858f71b052ef85476785120ec7fa">taskTwo</link> (
std::shared_ptr&lt;<link linkend="d8/d84/a00001">Semaphore</link>&gt; theSemaphore)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/karl/ConcDev/CDDLabs/Lab1/signal.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="d1/d7c/a00003">Semaphore.h</link>&quot;</emphasis>
2 <emphasis class="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
3 <emphasis class="preprocessor">#include&#32;&lt;thread&gt;</emphasis>
4 
<link linkend="d0/d0b/a00004_1a3b369c364dd84f7b8e12882541c3f808">5 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="d0/d0b/a00004_1a3b369c364dd84f7b8e12882541c3f808">taskOne</link>(std::shared_ptr&lt;Semaphore&gt;&#32;theSemaphore){
6 &#32;&#32;std::cout&#32;&lt;&lt;<emphasis class="stringliteral">&quot;I&#32;&quot;</emphasis>;
7 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;must&#32;&quot;</emphasis>;
8 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;print&#32;&quot;</emphasis>;
9 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;first&quot;</emphasis>&lt;&lt;std::endl;
10 &#32;&#32;theSemaphore-&gt;Signal();
11 }
<link linkend="d0/d0b/a00004_1ac144858f71b052ef85476785120ec7fa">12 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="d0/d0b/a00004_1ac144858f71b052ef85476785120ec7fa">taskTwo</link>(std::shared_ptr&lt;Semaphore&gt;&#32;theSemaphore){
13 &#32;&#32;theSemaphore-&gt;Wait();
14 &#32;&#32;std::cout&#32;&lt;&lt;<emphasis class="stringliteral">&quot;This&#32;&quot;</emphasis>;
15 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;will&#32;&quot;</emphasis>;
16 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;appear&#32;&quot;</emphasis>;
17 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;second&quot;</emphasis>&lt;&lt;std::endl;
18 }
19 
<link linkend="d0/d0b/a00004_1a840291bc02cba5474a4cb46a9b9566fe">20 </link><emphasis class="keywordtype">int</emphasis>&#32;<link linkend="d0/d0b/a00004_1a840291bc02cba5474a4cb46a9b9566fe">main</link>(<emphasis class="keywordtype">void</emphasis>){
21 &#32;&#32;std::thread&#32;threadOne,&#32;threadTwo;
22 &#32;&#32;std::shared_ptr&lt;Semaphore&gt;&#32;sem(&#32;<emphasis class="keyword">new</emphasis>&#32;<link linkend="d8/d84/a00001">Semaphore</link>);
24 &#32;&#32;threadOne=std::thread(<link linkend="d0/d0b/a00004_1ac144858f71b052ef85476785120ec7fa">taskTwo</link>,sem);
25 &#32;&#32;threadTwo=std::thread(<link linkend="d0/d0b/a00004_1a3b369c364dd84f7b8e12882541c3f808">taskOne</link>,sem);
26 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Launched&#32;from&#32;the&#32;main\n&quot;</emphasis>;
27 &#32;&#32;threadOne.join();
28 &#32;&#32;threadTwo.join();
29 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0;
30 }
    </computeroutput></literallayout>
</section>
