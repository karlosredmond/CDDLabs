<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d0/d0b/a00004" kind="file" language="C++">
    <compoundname>signal.cpp</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/d0b/a00004_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="signal.cpp" line="20" column="1" bodyfile="signal.cpp" bodystart="20" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="d0/d0b/a00004_1a3b369c364dd84f7b8e12882541c3f808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void taskOne</definition>
        <argsstring>(std::shared_ptr&lt;Semaphore&gt; theSemaphore)</argsstring>
        <name>taskOne</name>
        <param>
          <type>std::shared_ptr&lt;<ref refid="d8/d84/a00001" kindref="compound">Semaphore</ref>&gt;</type>
          <declname>theSemaphore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="signal.cpp" line="5" column="1" bodyfile="signal.cpp" bodystart="5" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="d0/d0b/a00004_1ac144858f71b052ef85476785120ec7fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void taskTwo</definition>
        <argsstring>(std::shared_ptr&lt;Semaphore&gt; theSemaphore)</argsstring>
        <name>taskTwo</name>
        <param>
          <type>std::shared_ptr&lt;<ref refid="d8/d84/a00001" kindref="compound">Semaphore</ref>&gt;</type>
          <declname>theSemaphore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="signal.cpp" line="12" column="1" bodyfile="signal.cpp" bodystart="12" bodyend="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d7c/a00003" kindref="compound">Semaphore.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="d0/d0b/a00004_1a3b369c364dd84f7b8e12882541c3f808" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/d0b/a00004_1a3b369c364dd84f7b8e12882541c3f808" kindref="member">taskOne</ref>(std::shared_ptr&lt;Semaphore&gt;<sp/>theSemaphore){</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;I<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;must<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;print<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>theSemaphore-&gt;Signal();</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12" refid="d0/d0b/a00004_1ac144858f71b052ef85476785120ec7fa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/d0b/a00004_1ac144858f71b052ef85476785120ec7fa" kindref="member">taskTwo</ref>(std::shared_ptr&lt;Semaphore&gt;<sp/>theSemaphore){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>theSemaphore-&gt;Wait();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;This<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;will<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;appear<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="d0/d0b/a00004_1a840291bc02cba5474a4cb46a9b9566fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/d0b/a00004_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>std::thread<sp/>threadOne,<sp/>threadTwo;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Semaphore&gt;<sp/>sem(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/d84/a00001" kindref="compound">Semaphore</ref>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>threadOne=std::thread(<ref refid="d0/d0b/a00004_1ac144858f71b052ef85476785120ec7fa" kindref="member">taskTwo</ref>,sem);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>threadTwo=std::thread(<ref refid="d0/d0b/a00004_1a3b369c364dd84f7b8e12882541c3f808" kindref="member">taskOne</ref>,sem);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Launched<sp/>from<sp/>the<sp/>main\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>threadOne.join();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>threadTwo.join();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="signal.cpp"/>
  </compounddef>
</doxygen>
